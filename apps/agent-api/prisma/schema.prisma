generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better Auth Models
model User {
  id        String   @id
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenant relationships
  memberships      OrganizationMember[]
  activeOrgId      String?
  activeOrg        Organization?        @relation("ActiveOrganization", fields: [activeOrgId], references: [id])
  
  // User created resources
  createdAgents         Agent[]
  createdKnowledgeBases KnowledgeBase[]
  createdWorkflows      WorkFlow[]
  
  sessions Session[]
  accounts Account[]

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  logo        String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  members                  OrganizationMember[]
  activeUsers              User[]               @relation("ActiveOrganization")
  
  // Organization owned resources
  agents                   Agent[]
  knowledgeBases          KnowledgeBase[]
  workflows               WorkFlow[]
  toolkits                Toolkit[]

  @@map("organizations")
}

model OrganizationMember {
  id     String   @id @default(cuid())
  userId String
  orgId  String
  role   OrgRole  @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@map("organization_members")
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
}

model Agent {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  prompt               String
  options              Json
  agentToolkits        AgentToolkit[]
  agentTools           AgentTool[]
  agentKnowledgeBases  AgentKnowledgeBase[]
  workflowAgents       WorkflowAgent[]
  scheduledTasks       ScheduledTask[]
  conversations        Conversation[]
  
  // Multi-tenant fields (now required)
  createdById          String
  organizationId       String
  isWorkflowGenerated  Boolean                @default(false)
  
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  deleted              Boolean                @default(false)

  // Relationships
  createdBy            User                   @relation(fields: [createdById], references: [id])
  organization         Organization           @relation(fields: [organizationId], references: [id])

  @@index([createdById, organizationId])
  @@map("agents")
}

model Toolkit {
  id            String        @id
  name          String
  description   String
  settings      Json
  type          ToolkitType  @default(BUSINESS)
  
  // Multi-tenant fields
  organizationId String?      // System toolkits can be null
  
  agentToolkits AgentToolkit[]
  tools         Tool[]
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @map("updated_at")
  deleted       Boolean       @default(false)

  // Relationships
  organization  Organization? @relation(fields: [organizationId], references: [id])

  @@map("toolkits")
}

model AgentToolkit {
  id        String   @id @default(cuid())
  settings  Json
  agent     Agent    @relation(fields: [agentId], references: [id])
  agentId   String
  toolkit   Toolkit  @relation(fields: [toolkitId], references: [id])
  toolkitId String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([agentId, toolkitId])
  @@map("agent_toolkits")
}

model Tool {
  id          String        @id @default(cuid())
  name        String        @unique
  description String
  schema      Json
  toolkit     Toolkit     @relation(fields: [toolkitId], references: [id])
  toolkitId   String
  agentTools  AgentTool[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")

  @@map("tools")
}

model AgentTool {
  id        String   @id @default(cuid())
  agent     Agent    @relation(fields: [agentId], references: [id])
  agentId   String
  tool      Tool     @relation(fields: [toolId], references: [id])
  toolId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agentId])
  @@map("agent_tools")
}

model WorkFlow {
  id        String   @id @default(cuid())
  name      String
  description String?
  DSL       Json
  
  // Multi-tenant fields (now required)
  createdById    String
  organizationId String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deleted     Boolean  @default(false)

  // 工作流关联的智能体
  workflowAgents WorkflowAgent[]

  // Relationships
  createdBy      User         @relation(fields: [createdById], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([createdById, organizationId])
  @@map("workflows")
}

// 工作流智能体关联表
model WorkflowAgent {
  id         String   @id @default(cuid())
  workflowId String
  agentId    String
  agentName  String   // DSL 中的智能体名称
  createdAt  DateTime @default(now())

  workflow   WorkFlow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  agent      Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([workflowId, agentName])
  @@unique([workflowId, agentId])
  @@map("workflow_agents")
}

model KnowledgeBase {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  metadata             Json?
  vectorStoreName      String                 @unique
  
  // Multi-tenant fields (now required)
  createdById          String
  organizationId       String
  
  agentKnowledgeBases  AgentKnowledgeBase[]
  files                File[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  // Relationships
  createdBy            User                   @relation(fields: [createdById], references: [id])
  organization         Organization           @relation(fields: [organizationId], references: [id])

  @@index([createdById, organizationId])
  @@map("knowledge_bases")
}

model AgentKnowledgeBase {
  id              String        @id @default(cuid())
  agent           Agent         @relation(fields: [agentId], references: [id])
  agentId         String
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id])
  knowledgeBaseId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([agentId, knowledgeBaseId])
  @@map("agent_knowledge_bases")
}

model File {
  id              String        @id @default(cuid())
  name            String
  path            String
  status          FileStatus    @default(PENDING)
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id])
  knowledgeBaseId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([knowledgeBaseId])
  @@map("files")
}

enum FileStatus {
  PENDING
  PROCESSING
  PROCESSED
  FAILED
}

enum ToolkitType {
  BUSINESS
  SYSTEM
}

model ScheduledTask {
  id             String   @id @default(cuid())
  name           String
  description    String?
  agentId        String
  triggerPrompt  String
  cronExpression String
  timezone       String   @default("Asia/Shanghai")
  enabled        Boolean  @default(true)
  lastRun        DateTime?
  nextRun        DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  agent          Agent           @relation(fields: [agentId], references: [id], onDelete: Cascade)
  executions     TaskExecution[]

  @@index([agentId])
  @@map("scheduled_tasks")
}

model TaskExecution {
  id             String              @id @default(cuid())
  taskId         String
  status         TaskExecutionStatus
  startTime      DateTime            @default(now())
  endTime        DateTime?
  error          String?
  conversationId String?

  task           ScheduledTask       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  conversation   Conversation?       @relation(fields: [conversationId], references: [id])

  @@map("task_executions")
}

model Conversation {
  id             String          @id @default(cuid())
  agentId        String
  title          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  agent          Agent           @relation(fields: [agentId], references: [id], onDelete: Cascade)
  messages       Message[]
  taskExecutions TaskExecution[]

  @@index([agentId])
  @@map("conversations")
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String
  metadata       Json?
  createdAt      DateTime    @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@map("messages")
}

enum TaskExecutionStatus {
  RUNNING
  COMPLETED
  FAILED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}
